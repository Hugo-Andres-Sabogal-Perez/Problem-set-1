require(pacman)
p_load(tidyverse,fixest, stargazer,knitr,kableExtra,jtools,ggstance,broom,broom.mixed,skimr)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
install.packages("pacman")
source("~/.active-rstudio-document")
install.packages("pacman")
install.packages("pacman")
require(pacman)
p_load(rio,tidyverse,skimr,visdat,corrplot,stargazer)
df <- import("https://github.com/ignaciomsarmiento/datasets/blob/main/GEIH_sample1.Rds?raw=true")
install.packages("pacman")
source("~/.active-rstudio-document")
install.packages("pacman")
source("~/.active-rstudio-document", echo=TRUE)
install.packages("pacman")
source("~/.active-rstudio-document")
install.packages("pacman")
source("~/.active-rstudio-document", echo=TRUE)
install.packages("pacman")
source("~/.active-rstudio-document", echo=TRUE)
install.packages("pacman")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
exp(reg1$coef[1]+reg1$coef[2]*16)
reg1$coef[1]
rm(list=ls())
install.packages("pacman")
require("pacman")
p_load("tidyverse","stargazer")
nlsy <- read_csv('https://raw.githubusercontent.com/ignaciomsarmiento/datasets/main/nlsy97.csv')
#Housekeeping
nlsy <- nlsy  %>%   drop_na(educ) #dropea los valores faltantes (NA)
head(nlsy)
reg1<- lm(lnw_2016~educ,   data = nlsy)
reg2<- lm(lnw_2016~educ+ exp,   data = nlsy)
stargazer(reg1,reg2,type="text") #Similar en stata: outreg2
reg1$coef
reg1$coef[1]
reg1$coef[1]+reg1$coef[2]*16
exp(reg1$coef[1]+reg1$coef[2]*16)
rm(list = ls())
#Llamamos las librerías necesarias para la realización del trabajo
require(pacman)
require(tidyverse)
require(rvest)
require(stargazer)
require(rio)
require(caret)
require(gridExtra)
require(skimr)
require(boot)
require(tidytable)
require(VIM)
require(leaps)
DF<-import("Stores/DF.csv")
DF<-import("Stores/DF.csv")
rm(list = ls())
#Llamamos las librerías necesarias para la realización del trabajo
require(pacman)
require(tidyverse)
require(rvest)
require(stargazer)
require(rio)
require(caret)
require(gridExtra)
require(skimr)
require(boot)
require(tidytable)
require(VIM)
require(leaps)
DF<-import("Stores/DF.csv")
setwd("/Users/mapaosuna/Desktop/Octavo Semestre/Big Data/Talleres/Taller 1/Problem-set-1")
DF<-import("Stores/DF.csv")
vars = length(colnames(DF))
ED = data.frame('Variable' = colnames(DF), 'Missings' = rep(NA, vars), 'Media' =  rep(NA, vars), 'Desviacion Estandard' = rep(NA, vars))
# Se cuentan los missings y se calcula la media y la desviación estándar de la muestra:
for(col in colnames(DF)){
df = DF[,colnames(DF) == col]
NAs = sum(is.na(df))
mean = mean(df, na.rm = T)
sd = sqrt(var(df, na.rm = T))
ED[ED$Variable == col, 2] = NAs
ED[ED$Variable == col, 3] = mean
ED[ED$Variable == col, 4] = sd
}
# 1. Limpieza de datos:
# Se eliminan las constantes (u observaciones que tienen desviación estándar igual a cero) y las variables sin observaciones (missings):
C = ED %>% filter(Desviacion.Estandard == 0 | is.na(Desviacion.Estandard)) %>% select(Variable) %>% as.vector()
ED = ED %>% filter(Desviacion.Estandard != 0 | !is.na(Desviacion.Estandard))
ED = ED %>% filter(Variable != 'cuentaPropia')
DF = DF[!is.na(DF$y_ingLab_m_ha),]
DF = DF %>% select(-C$Variable)
DF = DF[DF$age!=78,]
DF=DF[!(rownames(DF)%in%c("5733", "579")),]
# 2. Estadisticas descriptivas:
base= DF %>% select(age,oficio, formal, maxEducLevel, orden, p7040, sex, sizeFirm, y_ingLab_m_ha, hoursWorkUsual)
base$ln_sal = log(base$y_ingLab_m_ha) #Se crea el logaritmo del salario por horas para normalizar los valores de la variable.
stargazer(base, type= "text", summary=T, title = "Estadisticas Descriptivas",out = "Views/esta_des.txt")
#Gráficas relevantes para las estadísticas descriptivas
#1. Histograma de la variable Y: salarios por horas
histograma_salario <- ggplot(base, aes(x=y_ingLab_m_ha)) +
geom_histogram(color="white",fill="darkblue") +
xlab('Salario por hora') + ylab('Frecuencia') +
theme_bw()
histograma_salario
ggsave("Views/histograma_sal.pdf", width = 6, height = 4,plot=histograma_salario)
#2. Histograma de la variable Y: log del salario por hora (transformación)
histograma <- ggplot(base, aes(x=ln_sal)) +
geom_histogram(color="white",fill="darkblue") +
xlab('Logaritmo del salario por hora') + ylab('Frecuencia') +
theme_bw()
histograma
ggsave("Views/histograma.pdf", width = 6, height = 4,plot=histograma)
#3. Gráfica de Dispersión: Edad vs. Logaritmo del Salario por hora
# El ln(w) es relativamente homocedastico sobre la edad.
dispersion = ggplot(base, aes(x=age, y=ln_sal)) + geom_point(color="navy") +
theme_bw() +
geom_smooth(method = 'lm',color="firebrick") +xlab('Edad')+
ylab('Logaritmo del salario por hora')
dispersion
ggsave("Views/dispersion.pdf", width = 6, height = 4,plot=dispersion)
#4. Gráfico de Barras: Sexo Vs. Salario Promedio
base$sex_factor <- factor(base$sex, levels = c(1,0),
labels = c('Masculino', 'Femenino'))
Salario_sex <- base %>% group_by(sex_factor)  %>%
summarize(mean_sal_sex=mean(y_ingLab_m_ha))
barras1 <- ggplot(Salario_sex, aes(x = sex_factor, y = mean_sal_sex)) +
geom_bar(width = 0.5, colour = "skyblue", fill = "skyblue", stat = "identity") +
labs(x = "Sexo", y = "Log del Salario por hora") +
theme_bw() +
scale_y_continuous(labels = scales::dollar_format())
barras1
ggsave("Views/barras1.pdf", width = 6, height = 4,plot=barras1)
#6. Gráfico de Barras: Edad vs. Salario Promedio
Edad <-base %>% group_by(age) %>%
summarize(mean_sal=mean(y_ingLab_m_ha))
barras2 <- ggplot(Edad, aes(x = age, y = mean_sal)) +
geom_bar(width = 0.5, colour ="skyblue", fill = "skyblue", stat = "identity") +
labs(x = "Edad", y = "Salario promedio") +
theme_bw() +
scale_y_continuous(labels = scales::dollar_format())
barras2
ggsave("Views/barras2.pdf", width = 6, height = 4,plot=barras2)
#3  LOG DEL SALARIO VS EDAD Y EDAD AL CUADRADO
#A Regresión_ Age
base$age_2 <- base$age^2
modelo1 <- lm(ln_sal~age + age_2, data=base)
stargazer(modelo1, type="latex", title = "Resultados Modelo 1", out = "Views/mod1.txt",digits = 5)
# Intervalo de confianza con boostrap:
boostage <-function(data,index){
f = lm(ln_sal~age + age_2, data, subset = index)
coefs = f$coefficients
b2 = coefs[2]
b3 = coefs[3]
page = -b2/(2*b3)
return(page)
}
# Se hace la estimacion por bootstrap:
peakage = boot(data=base, boostage, R=nrow(base))
peakage
# Calculo intervalo de confianza:
boot.ci(boot.out = peakage, conf = c(0.95, 0.99), type = 'all')
#3.PLOT
dispersion2 = ggplot(base, aes(x = age, y = ln_sal)) +
geom_point(color = "salmon") +
theme_bw() +
geom_smooth(color = "black", method = "lm", formula = y ~ poly(x, 2)) +
xlab("Edad") +
ylab("Logaritmo del salario por hora")
dispersion2
ggsave("Views/dispersion2.png", width = 6, height = 4,plot=dispersion2)
